import{f as n,g as s,H as a}from"./common-5ddf5050.js";const p='{"title":"Add Two Numbers","frontmatter":{},"headers":[{"level":2,"title":"Summary","slug":"summary"},{"level":2,"title":"Solution","slug":"solution"}],"lastUpdated":1593221159327.6057}';var t={};const o=a('<h1 id="add-two-numbers"><a class="header-anchor" href="#add-two-numbers" aria-hidden="true">#</a> Add Two Numbers</h1><p>两数相加</p><h2 id="summary"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><p>给出两个非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><div class="language-"><pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n输出：7 -&gt; 0 -&gt; 8\n原因：342 + 465 = 807\n\n</code></pre></div><h2 id="solution"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h2><div class="language-js"><pre><code>\n<span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    temp <span class="token operator">=</span> res<span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2 <span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>val<span class="token punctuation">;</span>\n    num1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    num2 <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span>val <span class="token operator">=</span> num2<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l2 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">||</span> num1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      res <span class="token operator">=</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    l1 <span class="token operator">=</span> l1 <span class="token operator">?</span> l1<span class="token punctuation">.</span>next <span class="token operator">:</span> l1<span class="token punctuation">;</span>\n    l2 <span class="token operator">=</span> l2 <span class="token operator">?</span> l2<span class="token punctuation">.</span>next <span class="token operator">:</span> l2<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div>',10);t.render=function(a,p){return n(),s("div",null,[o])};export default t;export{p as __pageData};

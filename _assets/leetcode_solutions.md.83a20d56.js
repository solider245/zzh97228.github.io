import{B as n,A as s,J as a}from"./common-3faa3bdf.js";const p='{"title":"两数相加","frontmatter":{},"headers":[{"level":2,"title":"两数相加","slug":"两数相加"},{"level":2,"title":"两数之和","slug":"两数之和"},{"level":2,"title":"无重复字符的最长子串","slug":"无重复字符的最长子串"}],"lastUpdated":1600087300843.1025}';var t={};const o=a('<h2 id="两数相加"><a class="header-anchor" href="#两数相加" aria-hidden="true">#</a> 两数相加</h2><p>给出两个非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><div class="language-bash"><pre><code>输入：<span class="token punctuation">(</span><span class="token number">2</span> -<span class="token operator">&gt;</span> <span class="token number">4</span> -<span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span><span class="token number">5</span> -<span class="token operator">&gt;</span> <span class="token number">6</span> -<span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span>\n输出：7 -<span class="token operator">&gt;</span> <span class="token number">0</span> -<span class="token operator">&gt;</span> <span class="token number">8</span>\n原因：342 + <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    temp <span class="token operator">=</span> res<span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2 <span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>val<span class="token punctuation">;</span>\n    num1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    num2 <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span>val <span class="token operator">=</span> num2<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l2 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">||</span> num1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      res <span class="token operator">=</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    l1 <span class="token operator">=</span> l1 <span class="token operator">?</span> l1<span class="token punctuation">.</span>next <span class="token operator">:</span> l1<span class="token punctuation">;</span>\n    l2 <span class="token operator">=</span> l2 <span class="token operator">?</span> l2<span class="token punctuation">.</span>next <span class="token operator">:</span> l2<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="两数之和"><a class="header-anchor" href="#两数之和" aria-hidden="true">#</a> 两数之和</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><div class="language-bash"><pre><code>示例:\n\n给定 nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">11</span>, <span class="token number">15</span><span class="token punctuation">]</span>, target <span class="token operator">=</span> <span class="token number">9</span>\n\n因为 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> + <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">9</span>\n所以返回 <span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">]</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    obj<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="无重复字符的最长子串"><a class="header-anchor" href="#无重复字符的最长子串" aria-hidden="true">#</a> 无重复字符的最长子串</h2><p>给定一个字符串，请你找出其中不含有重复字符的   最长子串   的长度。</p><p>示例  1:</p><div class="language-bash"><pre><code>输入: <span class="token string">&quot;abcabcbb&quot;</span>\n输出: <span class="token number">3</span>\n解释: 因为无重复字符的最长子串是 <span class="token string">&quot;abc&quot;</span>，所以其长度为 <span class="token number">3</span>。\n</code></pre></div><p>示例 2:</p><div class="language-bash"><pre><code>输入: <span class="token string">&quot;bbbbb&quot;</span>\n输出: <span class="token number">1</span>\n解释: 因为无重复字符的最长子串是 <span class="token string">&quot;b&quot;</span>，所以其长度为 <span class="token number">1</span>。\n</code></pre></div><p>示例 3:</p><div class="language-bash"><pre><code>输入: <span class="token string">&quot;pwwkew&quot;</span>\n输出: <span class="token number">3</span>\n解释: 因为无重复字符的最长子串是 <span class="token string">&quot;wke&quot;</span>，所以其长度为 <span class="token number">3</span>。\n     请注意，你的答案必须是 子串 的长度，<span class="token string">&quot;pwke&quot;</span> 是一个子序列，不是子串。\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> al <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    curr<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      temp <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> temp<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      curr<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> curr<span class="token punctuation">)</span> result <span class="token operator">=</span> curr<span class="token punctuation">;</span>\n    temp <span class="token operator">+=</span> al<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n    m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> rec <span class="token operator">=</span> record<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>rec <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> rec <span class="token operator">&gt;</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      left <span class="token operator">=</span> rec<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      m <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    record<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> m<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',22);t.render=function(a,p,t,e,c,u){return s(),n("div",null,[o])};export default t;export{p as __pageData};
